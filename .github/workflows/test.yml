name: Automated Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crypto_hacker_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/crypto_hacker_test
      NODE_ENV: test
      BOT_TOKEN: test_bot_token_12345
      VITE_DEV_MODE_BYPASS: true
      VITE_BOT_USERNAME: test_bot
      VITE_TON_MANIFEST_URL: https://test.com/manifest.json
      VITE_TON_PAYMENT_ADDRESS: test_address
      SESSION_SECRET: test_secret_key_for_testing_only

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Setup test environment
        run: cp .env.test .env

      - name: Run database migrations
        run: |
          echo "Running drizzle-kit push to create schema..."
          npm run db:push || echo "Warning: db:push had issues, continuing..."
          
          echo "Verifying database schema..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d crypto_hacker_test -c "\dt" || echo "No tables found yet"
          
          echo "Checking if users table exists..."
          TABLE_EXISTS=$(PGPASSWORD=postgres psql -h localhost -U postgres -d crypto_hacker_test -tAc "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name='users');")
          
          if [ "$TABLE_EXISTS" != "t" ]; then
            echo "Users table not found, running alternative migration..."
            npx drizzle-kit generate
            npx drizzle-kit migrate || echo "Migration had issues, will rely on test setup"
          fi
          
          echo "Final schema verification:"
          PGPASSWORD=postgres psql -h localhost -U postgres -d crypto_hacker_test -c "\dt"

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
